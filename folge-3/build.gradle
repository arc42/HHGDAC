import org.asciidoctor.gradle.AsciidoctorTask
import java.nio.file.Paths

plugins {
  id "org.asciidoctor.convert" version "1.5.6"
  id "com.github.ben-manes.versions" version "0.15.0"
}
apply plugin: 'groovy'

dependencies {
  testCompile(
          'junit:junit:4.12',
          'org.codehaus.groovy:groovy-all:2.4.9',
          'org.spockframework:spock-core:1.1-groovy-2.4'
  )
  asciidoctor 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.15'
}

asciidoctorj {
  version = '1.5.4'
}

asciidoctor {
  dependsOn test

  attributes \
        'sourceDir': "$projectDir/src/"
}

//tag::AsciidoctorTask[]

// common settings for asciidoctor
// this is needed for PDF generation with plantUML
tasks.withType(AsciidoctorTask) { docTask ->

  attributes \
          'source-highlighter': 'coderay',
          'toc': 'left',
          'icons': 'font',
          'sourceDir': "$projectDir/src/",
          'fullWidth': "scaledwidth=17cm, width=100%"

  // good to see what the build is doing...
  logDocuments = true

}

task generateHTML (
        type: AsciidoctorTask,
        group: 'docToolchain',
        description: 'use html5 as asciidoc backend') {

  backends = ['html5']
}

task generatePDF (
        type: AsciidoctorTask,
        description: 'use pdf as asciidoc backend') {

  backends = ['pdf']
}

task generateDocBook (
        type: AsciidoctorTask,
        description: 'use docbook as asciidoc backend') {

  backends = ['docbook']
}

task convertToDocx (
        dependsOn: 'generateDocBook',
        type: Exec
) {
  doFirst {
    file(Paths.get(generateDocBook.outputDir.toString(), "docx")).mkdirs()
  }
  workingDir file(Paths.get(generateDocBook.outputDir.toString(), "docbook"))
  executable = "pandoc"
  args = ['-r','docbook',
          '-t','docx',
          '-o','../docx/master.docx',
          'master.xml']
}

defaultTasks 'generateHTML', 'generatePDF', 'convertToDocx'
